From: Alexander Larsson <alexl@redhat.com>
Date: Wed, 31 May 2017 10:35:06 +0200
Subject: Minimal backport of rewrite-url and gpg-keys remote metadata support

This backports the minimal support for migrating a remote to
a new url/gpg-key from master (see commit 21778f1075e5ea834aeed4469cbfea723ef9ef8c
and 7a4c82529ec42c961fce341adcc0d8ec9687058a).

The support is manual (you must run flatpak remote-modify --update-metadata) and
only supports the client-side consuming parts. You have to use the 0.9.x
series to update the server-side repository.

Origin: upstream, 0.8.6
---
 common/flatpak-dir.c | 33 +++++++++++++++++++++++++++------
 1 file changed, 27 insertions(+), 6 deletions(-)

diff --git a/common/flatpak-dir.c b/common/flatpak-dir.c
index 9334fdd..1e3912c 100644
--- a/common/flatpak-dir.c
+++ b/common/flatpak-dir.c
@@ -7307,13 +7307,17 @@ flatpak_dir_update_remote_configuration (FlatpakDir   *self,
      flatpak_repo_set_* () family of functions) */
   static const char *const supported_params[] = {
     "xa.title",
-    "xa.default-branch", NULL
+    "xa.default-branch",
+    "xa.gpg-keys",
+    "xa.redirect-url",
+    NULL
   };
 
   g_autoptr(GVariant) summary = NULL;
   g_autoptr(GVariant) extensions = NULL;
   g_autoptr(GPtrArray) updated_params = NULL;
   GVariantIter iter;
+  g_autoptr(GBytes) gpg_keys = NULL;
 
   updated_params = g_ptr_array_new_with_free_func (g_free);
   summary = fetch_remote_summary_file (self, remote, cancellable, error);
@@ -7330,14 +7334,31 @@ flatpak_dir_update_remote_configuration (FlatpakDir   *self,
 
       while (g_variant_iter_next (&iter, "{sv}", &key, &value_var))
         {
-          /* At the moment, every supported parameter are strings */
-          if (g_strv_contains (supported_params, key) &&
-              g_variant_get_type_string (value_var))
+          /* At the moment, every supported parameter except gpg-keys are strings */
+          if (strcmp (key, "xa.gpg-keys") == 0 &&
+              g_variant_is_of_type (value_var, G_VARIANT_TYPE_BYTESTRING))
+            {
+              const guchar *gpg_data = g_variant_get_data (value_var);
+              gsize gpg_size = g_variant_get_size (value_var);
+              g_autofree gchar *gpg_data_checksum = g_compute_checksum_for_data (G_CHECKSUM_SHA256, gpg_data, gpg_size);
+
+              gpg_keys = g_bytes_new (gpg_data, gpg_size);
+
+              /* We store the hash so that we can detect when things changed or not
+                 instead of re-importing the key over-and-over */
+              g_ptr_array_add (updated_params, g_strdup ("xa.gpg-keys-hash"));
+              g_ptr_array_add (updated_params, g_steal_pointer (&gpg_data_checksum));
+            }
+          else if (g_strv_contains (supported_params, key) &&
+                   g_variant_get_type_string (value_var))
             {
               const char *value = g_variant_get_string(value_var, NULL);
               if (value != NULL && *value != 0)
                 {
-                  g_ptr_array_add (updated_params, g_strdup (key));
+                  if (strcmp (key, "xa.redirect-url") == 0)
+                    g_ptr_array_add (updated_params, g_strdup ("url"));
+                  else
+                    g_ptr_array_add (updated_params, g_strdup (key));
                   g_ptr_array_add (updated_params, g_strdup (value));
                 }
             }
@@ -7404,7 +7425,7 @@ flatpak_dir_update_remote_configuration (FlatpakDir   *self,
       }
 
     /* Update the local remote configuration with the updated info. */
-    if (!flatpak_dir_modify_remote (self, remote, config, NULL, cancellable, error))
+    if (!flatpak_dir_modify_remote (self, remote, config, gpg_keys, cancellable, error))
       return FALSE;
   }
 
