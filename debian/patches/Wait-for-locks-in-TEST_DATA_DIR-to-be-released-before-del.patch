From: Simon McVittie <smcv@debian.org>
Date: Wed, 27 Jul 2016 23:50:02 +0100
Subject: Wait for locks in TEST_DATA_DIR to be released before deleting

These locks are taken by the bwrap init process to indicate that the
refs are still in use, and are cleaned up along with the mount
namespace when the bwrap container terminates. Until these locks
have been released, rm -rf $TEST_DATA_DIR could fail with EBUSY
because the $TEST_DATA_DIR contains active mount points.

The test cleanup proceeds as soon as the main process in the container
(process 2 in the pid namespace) has exited, but bwrap's init process
(process 1 in the pid namespaces) continues to run for a short time
after it has reported process 2's exit, leading to a race condition.
The mounts don't go away until the init process does.

Signed-off-by: Simon McVittie <smcv@debian.org>
---
 tests/Makefile.am.inc        |  2 ++
 tests/libtest.sh             |  5 ++++
 tests/wait-for-write-locks.c | 66 ++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 73 insertions(+)
 create mode 100644 tests/wait-for-write-locks.c

diff --git a/tests/Makefile.am.inc b/tests/Makefile.am.inc
index 2156e03..9e425c3 100644
--- a/tests/Makefile.am.inc
+++ b/tests/Makefile.am.inc
@@ -107,6 +107,8 @@ dist_test_scripts = \
 
 test_programs = testdb test-doc-portal
 
+test_extra_programs = tests/wait-for-write-locks
+
 @VALGRIND_CHECK_RULES@
 VALGRIND_SUPPRESSIONS_FILES=tests/flatpak.supp tests/glib.supp
 EXTRA_DIST += tests/flatpak.supp tests/glib.supp
diff --git a/tests/libtest.sh b/tests/libtest.sh
index 9dbcc11..d515410 100644
--- a/tests/libtest.sh
+++ b/tests/libtest.sh
@@ -242,6 +242,11 @@ fi
 
 cleanup () {
     /bin/kill $DBUS_SESSION_BUS_PID
+
+    # wait for the TEST_DATA_DIR to not be in use before deleting it
+    find $TEST_DATA_DIR/home $TEST_DATA_DIR/system \
+        -name .ref | xargs ${test_builddir}/wait-for-write-locks
+
     fusermount -u $XDG_RUNTIME_DIR/doc || :
     rm -rf $TEST_DATA_DIR
 }
diff --git a/tests/wait-for-write-locks.c b/tests/wait-for-write-locks.c
new file mode 100644
index 0000000..1268c3a
--- /dev/null
+++ b/tests/wait-for-write-locks.c
@@ -0,0 +1,66 @@
+/*
+ * Copyright Â© 2016 Simon McVittie
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include "config.h"
+
+#include <errno.h>
+#include <fcntl.h>
+#include <stdio.h>
+#include <string.h>
+#include <unistd.h>
+
+/*
+ * Wait for locks of the same type used by bubblewrap to be available.
+ */
+int
+main (int argc, char **argv)
+{
+  int i;
+  int ret = 0;
+
+  alarm (30);
+
+  for (i = 1; i < argc; i++)
+    {
+      struct flock l = {
+          .l_type = F_WRLCK,
+          .l_whence = SEEK_SET,
+          .l_start = 0,
+          .l_len = 0
+      };
+      int fd;
+
+      fd = open (argv[i], O_RDWR | O_CLOEXEC);
+
+      if (fd < 0)
+        {
+          fprintf (stderr, "Cannot open \"%s\": %s\n", argv[i], strerror (errno));
+          ret = 1;
+          continue;
+        }
+
+      if (fcntl (fd, F_SETLKW, &l) < 0)
+        {
+          fprintf (stderr, "Cannot lock \"%s\": %s\n", argv[i], strerror (errno));
+          ret = 1;
+        }
+
+      close (fd);
+    }
+
+  return ret;
+}
