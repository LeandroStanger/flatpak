/*
 * Generated by gdbus-codegen 2.49.0. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef ____PERMISSION_STORE_PERMISSION_STORE_DBUS_H__
#define ____PERMISSION_STORE_PERMISSION_STORE_DBUS_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.impl.portal.PermissionStore */

#define XDG_TYPE_PERMISSION_STORE (xdg_permission_store_get_type ())
#define XDG_PERMISSION_STORE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XDG_TYPE_PERMISSION_STORE, XdgPermissionStore))
#define XDG_IS_PERMISSION_STORE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XDG_TYPE_PERMISSION_STORE))
#define XDG_PERMISSION_STORE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), XDG_TYPE_PERMISSION_STORE, XdgPermissionStoreIface))

struct _XdgPermissionStore;
typedef struct _XdgPermissionStore XdgPermissionStore;
typedef struct _XdgPermissionStoreIface XdgPermissionStoreIface;

struct _XdgPermissionStoreIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_delete) (
    XdgPermissionStore *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_table,
    const gchar *arg_id);

  gboolean (*handle_list) (
    XdgPermissionStore *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_table);

  gboolean (*handle_lookup) (
    XdgPermissionStore *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_table,
    const gchar *arg_id);

  gboolean (*handle_set) (
    XdgPermissionStore *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_table,
    gboolean arg_create,
    const gchar *arg_id,
    GVariant *arg_app_permissions,
    GVariant *arg_data);

  gboolean (*handle_set_permission) (
    XdgPermissionStore *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_table,
    gboolean arg_create,
    const gchar *arg_id,
    const gchar *arg_app,
    const gchar *const *arg_permissions);

  gboolean (*handle_set_value) (
    XdgPermissionStore *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_table,
    gboolean arg_create,
    const gchar *arg_id,
    GVariant *arg_data);

  void (*changed) (
    XdgPermissionStore *object,
    const gchar *arg_table,
    const gchar *arg_id,
    gboolean arg_deleted,
    GVariant *arg_data,
    GVariant *arg_permissions);

};

GType xdg_permission_store_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *xdg_permission_store_interface_info (void);
guint xdg_permission_store_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void xdg_permission_store_complete_lookup (
    XdgPermissionStore *object,
    GDBusMethodInvocation *invocation,
    GVariant *permissions,
    GVariant *data);

void xdg_permission_store_complete_set (
    XdgPermissionStore *object,
    GDBusMethodInvocation *invocation);

void xdg_permission_store_complete_delete (
    XdgPermissionStore *object,
    GDBusMethodInvocation *invocation);

void xdg_permission_store_complete_set_value (
    XdgPermissionStore *object,
    GDBusMethodInvocation *invocation);

void xdg_permission_store_complete_set_permission (
    XdgPermissionStore *object,
    GDBusMethodInvocation *invocation);

void xdg_permission_store_complete_list (
    XdgPermissionStore *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *ids);



/* D-Bus signal emissions functions: */
void xdg_permission_store_emit_changed (
    XdgPermissionStore *object,
    const gchar *arg_table,
    const gchar *arg_id,
    gboolean arg_deleted,
    GVariant *arg_data,
    GVariant *arg_permissions);



/* D-Bus method calls: */
void xdg_permission_store_call_lookup (
    XdgPermissionStore *proxy,
    const gchar *arg_table,
    const gchar *arg_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xdg_permission_store_call_lookup_finish (
    XdgPermissionStore *proxy,
    GVariant **out_permissions,
    GVariant **out_data,
    GAsyncResult *res,
    GError **error);

gboolean xdg_permission_store_call_lookup_sync (
    XdgPermissionStore *proxy,
    const gchar *arg_table,
    const gchar *arg_id,
    GVariant **out_permissions,
    GVariant **out_data,
    GCancellable *cancellable,
    GError **error);

void xdg_permission_store_call_set (
    XdgPermissionStore *proxy,
    const gchar *arg_table,
    gboolean arg_create,
    const gchar *arg_id,
    GVariant *arg_app_permissions,
    GVariant *arg_data,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xdg_permission_store_call_set_finish (
    XdgPermissionStore *proxy,
    GAsyncResult *res,
    GError **error);

gboolean xdg_permission_store_call_set_sync (
    XdgPermissionStore *proxy,
    const gchar *arg_table,
    gboolean arg_create,
    const gchar *arg_id,
    GVariant *arg_app_permissions,
    GVariant *arg_data,
    GCancellable *cancellable,
    GError **error);

void xdg_permission_store_call_delete (
    XdgPermissionStore *proxy,
    const gchar *arg_table,
    const gchar *arg_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xdg_permission_store_call_delete_finish (
    XdgPermissionStore *proxy,
    GAsyncResult *res,
    GError **error);

gboolean xdg_permission_store_call_delete_sync (
    XdgPermissionStore *proxy,
    const gchar *arg_table,
    const gchar *arg_id,
    GCancellable *cancellable,
    GError **error);

void xdg_permission_store_call_set_value (
    XdgPermissionStore *proxy,
    const gchar *arg_table,
    gboolean arg_create,
    const gchar *arg_id,
    GVariant *arg_data,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xdg_permission_store_call_set_value_finish (
    XdgPermissionStore *proxy,
    GAsyncResult *res,
    GError **error);

gboolean xdg_permission_store_call_set_value_sync (
    XdgPermissionStore *proxy,
    const gchar *arg_table,
    gboolean arg_create,
    const gchar *arg_id,
    GVariant *arg_data,
    GCancellable *cancellable,
    GError **error);

void xdg_permission_store_call_set_permission (
    XdgPermissionStore *proxy,
    const gchar *arg_table,
    gboolean arg_create,
    const gchar *arg_id,
    const gchar *arg_app,
    const gchar *const *arg_permissions,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xdg_permission_store_call_set_permission_finish (
    XdgPermissionStore *proxy,
    GAsyncResult *res,
    GError **error);

gboolean xdg_permission_store_call_set_permission_sync (
    XdgPermissionStore *proxy,
    const gchar *arg_table,
    gboolean arg_create,
    const gchar *arg_id,
    const gchar *arg_app,
    const gchar *const *arg_permissions,
    GCancellable *cancellable,
    GError **error);

void xdg_permission_store_call_list (
    XdgPermissionStore *proxy,
    const gchar *arg_table,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xdg_permission_store_call_list_finish (
    XdgPermissionStore *proxy,
    gchar ***out_ids,
    GAsyncResult *res,
    GError **error);

gboolean xdg_permission_store_call_list_sync (
    XdgPermissionStore *proxy,
    const gchar *arg_table,
    gchar ***out_ids,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define XDG_TYPE_PERMISSION_STORE_PROXY (xdg_permission_store_proxy_get_type ())
#define XDG_PERMISSION_STORE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XDG_TYPE_PERMISSION_STORE_PROXY, XdgPermissionStoreProxy))
#define XDG_PERMISSION_STORE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), XDG_TYPE_PERMISSION_STORE_PROXY, XdgPermissionStoreProxyClass))
#define XDG_PERMISSION_STORE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), XDG_TYPE_PERMISSION_STORE_PROXY, XdgPermissionStoreProxyClass))
#define XDG_IS_PERMISSION_STORE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XDG_TYPE_PERMISSION_STORE_PROXY))
#define XDG_IS_PERMISSION_STORE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), XDG_TYPE_PERMISSION_STORE_PROXY))

typedef struct _XdgPermissionStoreProxy XdgPermissionStoreProxy;
typedef struct _XdgPermissionStoreProxyClass XdgPermissionStoreProxyClass;
typedef struct _XdgPermissionStoreProxyPrivate XdgPermissionStoreProxyPrivate;

struct _XdgPermissionStoreProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  XdgPermissionStoreProxyPrivate *priv;
};

struct _XdgPermissionStoreProxyClass
{
  GDBusProxyClass parent_class;
};

GType xdg_permission_store_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (XdgPermissionStoreProxy, g_object_unref)
#endif

void xdg_permission_store_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
XdgPermissionStore *xdg_permission_store_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
XdgPermissionStore *xdg_permission_store_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void xdg_permission_store_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
XdgPermissionStore *xdg_permission_store_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
XdgPermissionStore *xdg_permission_store_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define XDG_TYPE_PERMISSION_STORE_SKELETON (xdg_permission_store_skeleton_get_type ())
#define XDG_PERMISSION_STORE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XDG_TYPE_PERMISSION_STORE_SKELETON, XdgPermissionStoreSkeleton))
#define XDG_PERMISSION_STORE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), XDG_TYPE_PERMISSION_STORE_SKELETON, XdgPermissionStoreSkeletonClass))
#define XDG_PERMISSION_STORE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), XDG_TYPE_PERMISSION_STORE_SKELETON, XdgPermissionStoreSkeletonClass))
#define XDG_IS_PERMISSION_STORE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XDG_TYPE_PERMISSION_STORE_SKELETON))
#define XDG_IS_PERMISSION_STORE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), XDG_TYPE_PERMISSION_STORE_SKELETON))

typedef struct _XdgPermissionStoreSkeleton XdgPermissionStoreSkeleton;
typedef struct _XdgPermissionStoreSkeletonClass XdgPermissionStoreSkeletonClass;
typedef struct _XdgPermissionStoreSkeletonPrivate XdgPermissionStoreSkeletonPrivate;

struct _XdgPermissionStoreSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  XdgPermissionStoreSkeletonPrivate *priv;
};

struct _XdgPermissionStoreSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType xdg_permission_store_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (XdgPermissionStoreSkeleton, g_object_unref)
#endif

XdgPermissionStore *xdg_permission_store_skeleton_new (void);


G_END_DECLS

#endif /* ____PERMISSION_STORE_PERMISSION_STORE_DBUS_H__ */
